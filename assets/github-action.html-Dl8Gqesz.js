import{_ as u,c as r,g as o,b as s,e as a,f as l,a as p,d as e,r as c,o as d}from"./app-DrEEMoSl.js";const k={},m={class:"table-of-contents"};function v(b,n){const t=c("router-link"),i=c("Mermaid");return d(),r("div",null,[o(" more "),s("nav",m,[s("ul",null,[s("li",null,[a(t,{to:"#github-actions-是什么"},{default:l(()=>n[0]||(n[0]=[e("GitHub Actions 是什么？")])),_:1})]),s("li",null,[a(t,{to:"#什么是ci-cd"},{default:l(()=>n[1]||(n[1]=[e("什么是CI/CD？")])),_:1})]),s("li",null,[a(t,{to:"#基本概念"},{default:l(()=>n[2]||(n[2]=[e("基本概念")])),_:1})]),s("li",null,[a(t,{to:"#关于工作流程"},{default:l(()=>n[3]||(n[3]=[e("关于工作流程")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#工作流基础"},{default:l(()=>n[4]||(n[4]=[e("工作流基础")])),_:1})]),s("li",null,[a(t,{to:"#工作流触发"},{default:l(()=>n[5]||(n[5]=[e("工作流触发")])),_:1})])])]),s("li",null,[a(t,{to:"#实例"},{default:l(()=>n[6]||(n[6]=[e("实例")])),_:1})]),s("li",null,[a(t,{to:"#流程解读"},{default:l(()=>n[7]||(n[7]=[e("流程解读")])),_:1})]),s("li",null,[a(t,{to:"#配置代码"},{default:l(()=>n[8]||(n[8]=[e("配置代码")])),_:1})]),s("li",null,[a(t,{to:"#配置解读"},{default:l(()=>n[9]||(n[9]=[e("配置解读")])),_:1})])])]),n[10]||(n[10]=p('<h2 id="github-actions-是什么" tabindex="-1"><a class="header-anchor" href="#github-actions-是什么"><span>GitHub Actions 是什么？</span></a></h2><p>Github Actions 是 Github 官方出的持续集成服务, 挺早之前就推出了。类似的还有如微软的DevOps、GitLab CI、Circle CI、Travis CI等等。大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p><p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p><p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p><h2 id="什么是ci-cd" tabindex="-1"><a class="header-anchor" href="#什么是ci-cd"><span>什么是CI/CD？</span></a></h2><p><a href="https://link.zhihu.com/?target=https%3A//www.redhat.com/en/topics/devops/what-is-ci-cd" target="_blank" rel="noopener noreferrer">What is CI/CD? (redhat.com)</a></p><p>字面意思就是持续集成Continuous Intergation/持续分发Continuous Delivery持续部署Continuous Deployment，网上有太多同质的解释都太过于晦涩，</p><p>提到CI/CD就离不开一个词叫流水线。流水线上每个人的工作是分工明确的，而且工程是有先后顺序，就像造一台车，先造零件，然后组装、喷涂、内饰最后还要测试。软件开发同样如此，有前期的产品设计，UI设计、单元的开发，产品的测试，优化迭代等都由不同的人负责。</p>',8)),a(i,{id:"mermaid-28",code:"eJzT1dXlKsksyUm1UnD2fLa18fmK7md7pjxfsosLJJOWk1+enJFYVKLgE8SlAATFpUnpRYkFGQqO0c96Gp/vXvtydtuzjgmxYMmUzKLU5JLM/DyY6qTSzBRdXbuS1OISIJWbWpSeChZPzUsB02iGKAAVKThBxZ52tD3tnxiT96J91dOuFU/nbADynu5oftqx4cnuyU93TYaodoaZ0Lzi+d5NSKohAkDVz+b0Pu1a+HTmCrAbi0sqc1IVHBXSMnNyrJTTzM0NzIx0ikuK8rNTgVwzMyhbtzwzpSTDyqigQic5Pye/CCiXlgaTS0ksBgZJUWKllYKpginCVCeoqQYGySmJyXBTUbhkGewMNdjIwDIZrhqNS6LBClwAlxPJSg=="}),n[11]||(n[11]=p(`<p>CI/CD另一个作用就是解决团队代码中的冲突或错误。你提交的代码是否会和其他人的有冲突，如果有就不准你提交，回去再和其他哥们儿商量下。同样这一点也能解决你上传BUG代码的问题，同样禁止你。</p><p>如果要做的这几点那就一定需要一个中心化的工厂而且有另一个高效的团队来管理这个工厂的正常运行。CI/CD背后的提供商就是这样的工厂，而为了保证“持续”这个词，任何人都不可能24小时不睡觉帮你在工厂审核你的代码，所以自动化也是CI/CD的一个关键，自动触发机制使得以上所有的操作都是自动化完成的。所以这个工厂其实是无人化的工厂。</p><p>说到底CI/CD并不是一项新的技术，而是一种行业的标准，任何人在其上工作都必须遵守的标准，正因有这样的标准化流程，才能让团队的每一个人都能在自己的岗位上有效输出。说白了也就是领导团队想方设法提高员工效率榨干每一分钟的防摸鱼工具。（笑）</p><p>确实是这样，CI/CD的标准化工具的出现使得从开发到部署的周期大幅度缩短，再配上云开发的代码仓，那简直就是：云仓CI，法力无边。Github Action出现了。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>GitHub Actions 有一些自己的术语。</p><p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><h2 id="关于工作流程" tabindex="-1"><a class="header-anchor" href="#关于工作流程"><span>关于工作流程</span></a></h2><p>工作流是一个可配置的自动化过程，将运行一个或多个作业。工作流由签入到存储库的YAML文件定义，并将在存储库中的事件触发时运行，或者可以手动触发，或者按照定义的计划。</p><p>工作流定义在存储库的 <code>.github/workflows</code> 目录中，一个存储库可以有多个工作流，每个工作流可以执行一组不同的任务。例如，您可以有一个工作流来构建和测试拉取请求，另一个工作流在每次创建发布时部署您的应用程序，还有一个工作流在每次有人打开新问题时添加标签。</p><p>workflow 文件的配置字段非常多，详见<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">官方文档</a>。下面是一些基本字段。</p><p><strong>（1）<code>name</code></strong></p><p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> GitHub Actions Demo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>（2）<code>on</code></strong></p><p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span> push</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码指定，<code>push</code>事件触发 workflow。</p><p><code>on</code>字段也可以是事件的数组。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> pull_request<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p><p>完整的事件列表，请查看<a href="https://help.github.com/en/articles/events-that-trigger-workflows" target="_blank" rel="noopener noreferrer">官方文档</a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p><p><strong>（3）<code>on.&lt;push|pull_request.&lt;tags|branches</code></strong></p><p>指定触发事件时，可以限定分支或标签。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span>    </span>
<span class="line">      <span class="token punctuation">-</span> master</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p><p><strong>（4）<code>jobs.&lt;job_id.name</code></strong></p><p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p><p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">my_first_job</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> My first job</span>
<span class="line">  <span class="token key atrule">my_second_job</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> My second job</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p><p><strong>（5）<code>jobs.&lt;job_id.needs</code></strong></p><p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">job1</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">job2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">needs</span><span class="token punctuation">:</span> job1</span>
<span class="line">  <span class="token key atrule">job3</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p><p><strong>（6）<code>jobs.&lt;job_id.runs-on</code></strong></p><p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><ul><li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li><li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li><li><code>macOS-latest</code>或<code>macOS-10.14</code></li></ul><p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">18.04</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>（7）<code>jobs.&lt;job_id.steps</code></strong></p><p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><ul><li><code>jobs.&lt;job_id.steps.name</code>：步骤名称。</li><li><code>jobs.&lt;job_id.steps.run</code>：该步骤运行的命令或者 action。</li><li><code>jobs.&lt;job_id.steps.env</code>：该步骤所需的环境变量。</li></ul><p>下面是一个完整的 workflow 文件的范例。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Greeting from Mona</span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span> push</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">my-job</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> My Job</span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Print a greeting</span>
<span class="line">       <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">MY_VAR</span><span class="token punctuation">:</span> Hi there<span class="token tag">!</span> My name is</span>
<span class="line">        <span class="token key atrule">FIRST_NAME</span><span class="token punctuation">:</span> Mona</span>
<span class="line">        <span class="token key atrule">MIDDLE_NAME</span><span class="token punctuation">:</span> The</span>
<span class="line">        <span class="token key atrule">LAST_NAME</span><span class="token punctuation">:</span> Octocat</span>
<span class="line">      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p><h3 id="工作流基础" tabindex="-1"><a class="header-anchor" href="#工作流基础"><span>工作流基础</span></a></h3><p>工作流必须包含以下基本组件：</p><ol><li>一个或多个将触发工作流的事件。</li><li>一个或多个作业，每个作业都将在运行机器上执行并运行一系列一个或多个步骤。</li><li>每个步骤都可以运行您定义的脚本或运行操作，这是一个可重用的扩展，可以简化您的工作流程。</li></ol><h3 id="工作流触发" tabindex="-1"><a class="header-anchor" href="#工作流触发"><span>工作流触发</span></a></h3><p>可以有多种触发方式，具体参见<a href="https://docs.github.com/zh/actions/using-workflows/triggering-a-workflow" target="_blank" rel="noopener noreferrer">官方文档</a>,下面以我的一个工作流举例讲解触发事件</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> gh<span class="token punctuation">-</span>pages</span>
<span class="line">    <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&#39;sitemap.xml&#39;</span></span>
<span class="line">  <span class="token key atrule">schedule</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">&quot;0 23 * * *&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子的触发机制如下：</p><ol><li>当有推送行为发生</li><li>推送分支为<code>gh-pages</code></li><li><code>sitemap.xml</code>文件被修改</li><li>每天 UTC 23:00触发<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></li><li>push下的分支和文件要同时触发才会使工作流运行</li></ol><div class="hint-container caution"><p class="hint-container-title">注意!!!</p><p>虽然官方文档未提及需要把<code>.github/workflows</code>目录下的工作流文件存储于指定触发分支下，但我实际操作中发现，如我设置的触发分支为<code>gh-pages</code>但假如我的.yaml文件在<code>main</code>分支下不在<code>gh-pages</code>根目录的<code>.github/workflows</code>文件夹下，实际并不会触发。</p></div><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><hr><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>这是一个<code>GitHub Actions</code>的配置文件，整体思路是，获取本次更新的url<br> （通过对比两次提交的sitemap.xml文件），所以触发条件是deploy分支有推送并修改了<code>sitemap.xml</code>文件，再利用python脚本进行url推送到百度、Bing、Google</p><p>脚本代码请看这里👉<a href="/posts/Python/submit-url">提交URL到搜索引擎（百度、Bing、Google）</a></p></div>`,61)),o(" more "),n[12]||(n[12]=s("p",null,[e("前些天不是写了Bing的提交脚本吗，但是每次都要自己手动跑脚本也很麻烦，但我又没有服务器，所以用上了GitHub Actions了嘛"),s("br"),e(" 总的来说做了以下事情：")],-1)),n[13]||(n[13]=s("ol",null,[s("li",null,"提交代码并修改sitemap.xml 后触发工作流"),s("li",null,"比对上一次提交和本次提交的新增URL"),s("li",null,"将URL分别提交给百度站长、Bing、Google 供搜索引擎快速收录"),s("li")],-1)),n[14]||(n[14]=s("h2",{id:"流程解读",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#流程解读"},[s("span",null,"流程解读")])],-1)),a(i,{id:"mermaid-292",code:"eJylUk1PwkAQvfdXbOKVJogBYg8mFIIXT8aLaTiUdguNm5a0S5Cb+BEDGCoHiTGaiBjhQMAL0YSAf6Yfy79wqUADN3Uvm3lvZt7bmWVZlsEqRpAD7qji9eqk2yHDMTPHFaSXpLxoYHDEM4Aes5jNGWIhD9JAIF+3pH1DLh/cx37GZ2XVgBJWdQ0cHPoAaXw4VstrDJ2XC8e6n11bLLtHBlNvMnCaE3v8Shs41rl7905xo6j5RVCT/TshkO6bYzXdRm92VskAmgJ4wa1XaUsq6fbb9rjjPS+Y5IKxP2sBMydSgjOoks7Vj92ll5o9fSKjlp+RnstJSDTNFFTAvgGhhsUcUFSEuK1wWJJFKWRiQz+BGyFbUmWc5yKF05CkI93gthRFWXKyaNLJGWKZA1EQXZM4hogONtBQspK8s73SWAv/qsGjIgwUIuFdaVW2Ef5SwcRlBOn+F9bj8XAsEliPxf7hGySC0QQgH0qulhKgqeULGf+zMN9pvxYZ"}),n[15]||(n[15]=p(`<h2 id="配置代码" tabindex="-1"><a class="header-anchor" href="#配置代码"><span>配置代码</span></a></h2><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> 推送脚本</span>
<span class="line"></span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> gh<span class="token punctuation">-</span>pages</span>
<span class="line">    <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&#39;sitemap.xml&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push_bot</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout gh<span class="token punctuation">-</span>pages branch</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">          <span class="token key atrule">ref</span><span class="token punctuation">:</span> <span class="token string">&#39;gh-pages&#39;</span></span>
<span class="line">          <span class="token key atrule">path</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages</span>
<span class="line">          </span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 获取上一次提交SHA</span>
<span class="line">        <span class="token key atrule">id</span><span class="token punctuation">:</span> last<span class="token punctuation">-</span>commit</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">          cd gh-pages</span>
<span class="line">          PREV=$(git log --format=&quot;%H&quot; -n 2 | tail -n 1)</span>
<span class="line">          echo &quot;SHA_KEY=$PREV&quot; &gt;&gt; $GITHUB_OUTPUT</span>
<span class="line">          echo $PREV</span></span>
<span class="line">        </span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 拉取prev代码</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.last<span class="token punctuation">-</span>commit.outputs.SHA_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">path</span><span class="token punctuation">:</span> prev</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout main branch</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">ref</span><span class="token punctuation">:</span> <span class="token string">&#39;main&#39;</span></span>
<span class="line">          <span class="token key atrule">path</span><span class="token punctuation">:</span> main</span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Python</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>python@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">python-version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.10&quot;</span></span>
<span class="line">          <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token string">&quot;pip&quot;</span> <span class="token comment"># 设置缓存</span></span>
<span class="line"></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 安装依赖</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">          pip install -r main/script/requirements.txt</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 运行脚本</span>
<span class="line">        <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token comment">#设置secrets的环境变量</span></span>
<span class="line">          <span class="token key atrule">BAIDU_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.BAIDU_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">BING_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.BING_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">GOOGLE_JSON</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GOOGLE_JSON <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string"></span>
<span class="line">          python main/script/submit.py --sitemap gh-pages/sitemap.xml --prevsitemap prev/sitemap.xml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置解读" tabindex="-1"><a class="header-anchor" href="#配置解读"><span>配置解读</span></a></h2><h4 id="触发" tabindex="-1"><a class="header-anchor" href="#触发"><span>触发</span></a></h4><p>这个例子的触发机制如下：</p><ol><li>当有推送行为发生</li><li>推送分支为<code>gh-pages</code></li><li><code>sitemap.xml</code>文件被修改</li></ol><h4 id="配置运行环境" tabindex="-1"><a class="header-anchor" href="#配置运行环境"><span>配置运行环境</span></a></h4><p>这里指定<code>ubuntu-latest</code></p><h4 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h4><ol><li><p>拉取 gh-pages 分支代码到路径<code>gh-pages</code></p></li><li><p>获取上一次提交SHA-1值使用如下命令，将获取到的倒数第二次git提交SHA-1值存储到环境变量<code>GITHUB_OUTPUT</code><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup>中，方便后续使用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"> <span class="token builtin class-name">cd</span> gh-pages</span>
<span class="line"> <span class="token assign-left variable">PREV</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> log <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&quot;%H&quot;</span> <span class="token parameter variable">-n</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1</span><span class="token variable">)</span></span></span>
<span class="line"> <span class="token builtin class-name">echo</span> <span class="token string">&quot;SHA_KEY=<span class="token variable">$PREV</span>&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$GITHUB_OUTPUT</span></span>
<span class="line"> <span class="token builtin class-name">echo</span> <span class="token variable">$PREV</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取上一步存储到到<code>GITHUB_OUTPUT</code>的commitid，并拉取代码代码到路径prev，ref可以是分支，tag，commitid</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"> <span class="token key atrule">name</span><span class="token punctuation">:</span> 拉取prev代码</span>
<span class="line"> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3</span>
<span class="line"> <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token key atrule">ref</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.last<span class="token punctuation">-</span>commit.outputs.SHA_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">     <span class="token key atrule">path</span><span class="token punctuation">:</span> prev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>拉取main分支代码到路径main</p></li><li><p>安装python环境并设置缓存</p></li><li><p>安装python依赖库</p></li><li><p>运行脚本读取配置在仓库--&gt;Settings--&gt;Secrets and variables--&gt;Actions--&gt;Repository secrets中的环境变量，并把上次提交的sitemap.xml和本次提交的sitemap.xml作为命令行参数提交给python脚本</p><figure><img src="https://s3.bmp.ovh/imgs/2023/04/17/67c1bc7646f4be1d.png" alt="Repository secrets" tabindex="0" loading="lazy"><figcaption>Repository secrets</figcaption></figure></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>可以使用 <a href="https://crontab.guru/" target="_blank" rel="noopener noreferrer">crontab guru</a> 帮助生成 cron 语法并确认其运行时间。 为了帮助入门，还提供了 <a href="https://crontab.guru/examples.html" target="_blank" rel="noopener noreferrer">crontab guru 示例</a>列表。计划工作流程的通知将发送给最后修改工作流程文件中的 cron 语法的用户。 有关详细信息，请参阅“<a href="https://docs.github.com/zh/actions/monitoring-and-troubleshooting-workflows/notifications-for-workflow-runs" target="_blank" rel="noopener noreferrer">工作流程运行通知</a>”。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p><a href="https://docs.github.com/zh/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable" target="_blank" rel="noopener noreferrer">设置步骤的输出参数</a> <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,12))])}const g=u(k,[["render",v],["__file","github-action.html.vue"]]),y=JSON.parse('{"path":"/tutorial/github/github-action.html","title":"GitHub Actions 使用介绍","lang":"zh-CN","frontmatter":{"title":"GitHub Actions 使用介绍","icon":"actions","date":"2023-04-14T00:00:00.000Z","star":true,"cover":"https://w.wallhaven.cc/full/j3/wallhaven-j3zvvp.jpg","category":["GitHub"],"tag":["GitHub Actions"],"description":"GitHub Actions 是什么？ Github Actions 是 Github 官方出的持续集成服务, 挺早之前就推出了。类似的还有如微软的DevOps、GitLab CI、Circle CI、Travis CI等等。大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 ...","head":[["meta",{"property":"og:url","content":"https://www.cnmd.icu/tutorial/github/github-action.html"}],["meta",{"property":"og:site_name","content":"氚花盏-三个三"}],["meta",{"property":"og:title","content":"GitHub Actions 使用介绍"}],["meta",{"property":"og:description","content":"GitHub Actions 是什么？ Github Actions 是 Github 官方出的持续集成服务, 挺早之前就推出了。类似的还有如微软的DevOps、GitLab CI、Circle CI、Travis CI等等。大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://w.wallhaven.cc/full/j3/wallhaven-j3zvvp.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-07T05:22:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://w.wallhaven.cc/full/j3/wallhaven-j3zvvp.jpg"}],["meta",{"name":"twitter:image:alt","content":"GitHub Actions 使用介绍"}],["meta",{"property":"article:tag","content":"GitHub Actions"}],["meta",{"property":"article:published_time","content":"2023-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-07T05:22:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GitHub Actions 使用介绍\\",\\"image\\":[\\"https://w.wallhaven.cc/full/j3/wallhaven-j3zvvp.jpg\\"],\\"datePublished\\":\\"2023-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-07T05:22:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三个三\\",\\"url\\":\\"https://www.cnmd.icu\\",\\"email\\":\\"mailto:2029364173@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"GitHub Actions 是什么？","slug":"github-actions-是什么","link":"#github-actions-是什么","children":[]},{"level":2,"title":"什么是CI/CD？","slug":"什么是ci-cd","link":"#什么是ci-cd","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"关于工作流程","slug":"关于工作流程","link":"#关于工作流程","children":[{"level":3,"title":"工作流基础","slug":"工作流基础","link":"#工作流基础","children":[]},{"level":3,"title":"工作流触发","slug":"工作流触发","link":"#工作流触发","children":[]}]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":2,"title":"流程解读","slug":"流程解读","link":"#流程解读","children":[]},{"level":2,"title":"配置代码","slug":"配置代码","link":"#配置代码","children":[]},{"level":2,"title":"配置解读","slug":"配置解读","link":"#配置解读","children":[]}],"git":{"createdTime":1712467377000,"updatedTime":1712467377000,"contributors":[{"name":"三个三","email":"2029364173@qq.com","commits":1}]},"readingTime":{"minutes":7.56,"words":2267},"filePathRelative":"tutorial/github/github-action.md","localizedDate":"2023年4月14日","excerpt":"<!-- more -->\\n\\n<h2>GitHub Actions 是什么？</h2>\\n<p>Github Actions 是 Github 官方出的持续集成服务, 挺早之前就推出了。类似的还有如微软的DevOps、GitLab CI、Circle CI、Travis CI等等。大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p>\\n<p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>","autoDesc":true}');export{g as comp,y as data};
